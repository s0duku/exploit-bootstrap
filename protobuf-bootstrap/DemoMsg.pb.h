// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DemoMsg.proto

#ifndef PROTOBUF_INCLUDED_DemoMsg_2eproto
#define PROTOBUF_INCLUDED_DemoMsg_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_DemoMsg_2eproto 

namespace protobuf_DemoMsg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_DemoMsg_2eproto
class DemoMsg;
class DemoMsgDefaultTypeInternal;
extern DemoMsgDefaultTypeInternal _DemoMsg_default_instance_;
class UserMsg;
class UserMsgDefaultTypeInternal;
extern UserMsgDefaultTypeInternal _UserMsg_default_instance_;
namespace google {
namespace protobuf {
template<> ::DemoMsg* Arena::CreateMaybeMessage<::DemoMsg>(Arena*);
template<> ::UserMsg* Arena::CreateMaybeMessage<::UserMsg>(Arena*);
}  // namespace protobuf
}  // namespace google

enum UserMsg_valueType {
  UserMsg_valueType_MOBILE = 0,
  UserMsg_valueType_HOME = 1,
  UserMsg_valueType_WORK = 2,
  UserMsg_valueType_UserMsg_valueType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  UserMsg_valueType_UserMsg_valueType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool UserMsg_valueType_IsValid(int value);
const UserMsg_valueType UserMsg_valueType_valueType_MIN = UserMsg_valueType_MOBILE;
const UserMsg_valueType UserMsg_valueType_valueType_MAX = UserMsg_valueType_WORK;
const int UserMsg_valueType_valueType_ARRAYSIZE = UserMsg_valueType_valueType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserMsg_valueType_descriptor();
inline const ::std::string& UserMsg_valueType_Name(UserMsg_valueType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserMsg_valueType_descriptor(), value);
}
inline bool UserMsg_valueType_Parse(
    const ::std::string& name, UserMsg_valueType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserMsg_valueType>(
    UserMsg_valueType_descriptor(), name, value);
}
// ===================================================================

class DemoMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DemoMsg) */ {
 public:
  DemoMsg();
  virtual ~DemoMsg();

  DemoMsg(const DemoMsg& from);

  inline DemoMsg& operator=(const DemoMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DemoMsg(DemoMsg&& from) noexcept
    : DemoMsg() {
    *this = ::std::move(from);
  }

  inline DemoMsg& operator=(DemoMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DemoMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DemoMsg* internal_default_instance() {
    return reinterpret_cast<const DemoMsg*>(
               &_DemoMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DemoMsg* other);
  friend void swap(DemoMsg& a, DemoMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DemoMsg* New() const final {
    return CreateMaybeMessage<DemoMsg>(NULL);
  }

  DemoMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DemoMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DemoMsg& from);
  void MergeFrom(const DemoMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DemoMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sender = 1;
  void clear_sender();
  static const int kSenderFieldNumber = 1;
  const ::std::string& sender() const;
  void set_sender(const ::std::string& value);
  #if LANG_CXX11
  void set_sender(::std::string&& value);
  #endif
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  ::std::string* mutable_sender();
  ::std::string* release_sender();
  void set_allocated_sender(::std::string* sender);

  // .UserMsg usermsg = 3;
  bool has_usermsg() const;
  void clear_usermsg();
  static const int kUsermsgFieldNumber = 3;
  private:
  const ::UserMsg& _internal_usermsg() const;
  public:
  const ::UserMsg& usermsg() const;
  ::UserMsg* release_usermsg();
  ::UserMsg* mutable_usermsg();
  void set_allocated_usermsg(::UserMsg* usermsg);

  // int32 priority = 2;
  void clear_priority();
  static const int kPriorityFieldNumber = 2;
  ::google::protobuf::int32 priority() const;
  void set_priority(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DemoMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sender_;
  ::UserMsg* usermsg_;
  ::google::protobuf::int32 priority_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DemoMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UserMsg) */ {
 public:
  UserMsg();
  virtual ~UserMsg();

  UserMsg(const UserMsg& from);

  inline UserMsg& operator=(const UserMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserMsg(UserMsg&& from) noexcept
    : UserMsg() {
    *this = ::std::move(from);
  }

  inline UserMsg& operator=(UserMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserMsg& default_instance();

  enum ValueCase {
    kStringval = 2,
    kBytesval = 3,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserMsg* internal_default_instance() {
    return reinterpret_cast<const UserMsg*>(
               &_UserMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(UserMsg* other);
  friend void swap(UserMsg& a, UserMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserMsg* New() const final {
    return CreateMaybeMessage<UserMsg>(NULL);
  }

  UserMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserMsg& from);
  void MergeFrom(const UserMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserMsg_valueType valueType;
  static const valueType MOBILE =
    UserMsg_valueType_MOBILE;
  static const valueType HOME =
    UserMsg_valueType_HOME;
  static const valueType WORK =
    UserMsg_valueType_WORK;
  static inline bool valueType_IsValid(int value) {
    return UserMsg_valueType_IsValid(value);
  }
  static const valueType valueType_MIN =
    UserMsg_valueType_valueType_MIN;
  static const valueType valueType_MAX =
    UserMsg_valueType_valueType_MAX;
  static const int valueType_ARRAYSIZE =
    UserMsg_valueType_valueType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  valueType_descriptor() {
    return UserMsg_valueType_descriptor();
  }
  static inline const ::std::string& valueType_Name(valueType value) {
    return UserMsg_valueType_Name(value);
  }
  static inline bool valueType_Parse(const ::std::string& name,
      valueType* value) {
    return UserMsg_valueType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .UserMsg.valueType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::UserMsg_valueType type() const;
  void set_type(::UserMsg_valueType value);

  // string stringval = 2;
  private:
  bool has_stringval() const;
  public:
  void clear_stringval();
  static const int kStringvalFieldNumber = 2;
  const ::std::string& stringval() const;
  void set_stringval(const ::std::string& value);
  #if LANG_CXX11
  void set_stringval(::std::string&& value);
  #endif
  void set_stringval(const char* value);
  void set_stringval(const char* value, size_t size);
  ::std::string* mutable_stringval();
  ::std::string* release_stringval();
  void set_allocated_stringval(::std::string* stringval);

  // bytes bytesval = 3;
  private:
  bool has_bytesval() const;
  public:
  void clear_bytesval();
  static const int kBytesvalFieldNumber = 3;
  const ::std::string& bytesval() const;
  void set_bytesval(const ::std::string& value);
  #if LANG_CXX11
  void set_bytesval(::std::string&& value);
  #endif
  void set_bytesval(const char* value);
  void set_bytesval(const void* value, size_t size);
  ::std::string* mutable_bytesval();
  ::std::string* release_bytesval();
  void set_allocated_bytesval(::std::string* bytesval);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:UserMsg)
 private:
  void set_has_stringval();
  void set_has_bytesval();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  union ValueUnion {
    ValueUnion() {}
    ::google::protobuf::internal::ArenaStringPtr stringval_;
    ::google::protobuf::internal::ArenaStringPtr bytesval_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_DemoMsg_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DemoMsg

// string sender = 1;
inline void DemoMsg::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DemoMsg::sender() const {
  // @@protoc_insertion_point(field_get:DemoMsg.sender)
  return sender_.GetNoArena();
}
inline void DemoMsg::set_sender(const ::std::string& value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DemoMsg.sender)
}
#if LANG_CXX11
inline void DemoMsg::set_sender(::std::string&& value) {
  
  sender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DemoMsg.sender)
}
#endif
inline void DemoMsg::set_sender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DemoMsg.sender)
}
inline void DemoMsg::set_sender(const char* value, size_t size) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DemoMsg.sender)
}
inline ::std::string* DemoMsg::mutable_sender() {
  
  // @@protoc_insertion_point(field_mutable:DemoMsg.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DemoMsg::release_sender() {
  // @@protoc_insertion_point(field_release:DemoMsg.sender)
  
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DemoMsg::set_allocated_sender(::std::string* sender) {
  if (sender != NULL) {
    
  } else {
    
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:DemoMsg.sender)
}

// int32 priority = 2;
inline void DemoMsg::clear_priority() {
  priority_ = 0;
}
inline ::google::protobuf::int32 DemoMsg::priority() const {
  // @@protoc_insertion_point(field_get:DemoMsg.priority)
  return priority_;
}
inline void DemoMsg::set_priority(::google::protobuf::int32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:DemoMsg.priority)
}

// .UserMsg usermsg = 3;
inline bool DemoMsg::has_usermsg() const {
  return this != internal_default_instance() && usermsg_ != NULL;
}
inline void DemoMsg::clear_usermsg() {
  if (GetArenaNoVirtual() == NULL && usermsg_ != NULL) {
    delete usermsg_;
  }
  usermsg_ = NULL;
}
inline const ::UserMsg& DemoMsg::_internal_usermsg() const {
  return *usermsg_;
}
inline const ::UserMsg& DemoMsg::usermsg() const {
  const ::UserMsg* p = usermsg_;
  // @@protoc_insertion_point(field_get:DemoMsg.usermsg)
  return p != NULL ? *p : *reinterpret_cast<const ::UserMsg*>(
      &::_UserMsg_default_instance_);
}
inline ::UserMsg* DemoMsg::release_usermsg() {
  // @@protoc_insertion_point(field_release:DemoMsg.usermsg)
  
  ::UserMsg* temp = usermsg_;
  usermsg_ = NULL;
  return temp;
}
inline ::UserMsg* DemoMsg::mutable_usermsg() {
  
  if (usermsg_ == NULL) {
    auto* p = CreateMaybeMessage<::UserMsg>(GetArenaNoVirtual());
    usermsg_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DemoMsg.usermsg)
  return usermsg_;
}
inline void DemoMsg::set_allocated_usermsg(::UserMsg* usermsg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete usermsg_;
  }
  if (usermsg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      usermsg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, usermsg, submessage_arena);
    }
    
  } else {
    
  }
  usermsg_ = usermsg;
  // @@protoc_insertion_point(field_set_allocated:DemoMsg.usermsg)
}

// -------------------------------------------------------------------

// UserMsg

// .UserMsg.valueType type = 1;
inline void UserMsg::clear_type() {
  type_ = 0;
}
inline ::UserMsg_valueType UserMsg::type() const {
  // @@protoc_insertion_point(field_get:UserMsg.type)
  return static_cast< ::UserMsg_valueType >(type_);
}
inline void UserMsg::set_type(::UserMsg_valueType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:UserMsg.type)
}

// string stringval = 2;
inline bool UserMsg::has_stringval() const {
  return value_case() == kStringval;
}
inline void UserMsg::set_has_stringval() {
  _oneof_case_[0] = kStringval;
}
inline void UserMsg::clear_stringval() {
  if (has_stringval()) {
    value_.stringval_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& UserMsg::stringval() const {
  // @@protoc_insertion_point(field_get:UserMsg.stringval)
  if (has_stringval()) {
    return value_.stringval_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void UserMsg::set_stringval(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:UserMsg.stringval)
  if (!has_stringval()) {
    clear_value();
    set_has_stringval();
    value_.stringval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.stringval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserMsg.stringval)
}
#if LANG_CXX11
inline void UserMsg::set_stringval(::std::string&& value) {
  // @@protoc_insertion_point(field_set:UserMsg.stringval)
  if (!has_stringval()) {
    clear_value();
    set_has_stringval();
    value_.stringval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.stringval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserMsg.stringval)
}
#endif
inline void UserMsg::set_stringval(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_stringval()) {
    clear_value();
    set_has_stringval();
    value_.stringval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.stringval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserMsg.stringval)
}
inline void UserMsg::set_stringval(const char* value, size_t size) {
  if (!has_stringval()) {
    clear_value();
    set_has_stringval();
    value_.stringval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.stringval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserMsg.stringval)
}
inline ::std::string* UserMsg::mutable_stringval() {
  if (!has_stringval()) {
    clear_value();
    set_has_stringval();
    value_.stringval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:UserMsg.stringval)
  return value_.stringval_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserMsg::release_stringval() {
  // @@protoc_insertion_point(field_release:UserMsg.stringval)
  if (has_stringval()) {
    clear_has_value();
    return value_.stringval_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void UserMsg::set_allocated_stringval(::std::string* stringval) {
  if (!has_stringval()) {
    value_.stringval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (stringval != NULL) {
    set_has_stringval();
    value_.stringval_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stringval);
  }
  // @@protoc_insertion_point(field_set_allocated:UserMsg.stringval)
}

// bytes bytesval = 3;
inline bool UserMsg::has_bytesval() const {
  return value_case() == kBytesval;
}
inline void UserMsg::set_has_bytesval() {
  _oneof_case_[0] = kBytesval;
}
inline void UserMsg::clear_bytesval() {
  if (has_bytesval()) {
    value_.bytesval_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& UserMsg::bytesval() const {
  // @@protoc_insertion_point(field_get:UserMsg.bytesval)
  if (has_bytesval()) {
    return value_.bytesval_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void UserMsg::set_bytesval(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:UserMsg.bytesval)
  if (!has_bytesval()) {
    clear_value();
    set_has_bytesval();
    value_.bytesval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.bytesval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserMsg.bytesval)
}
#if LANG_CXX11
inline void UserMsg::set_bytesval(::std::string&& value) {
  // @@protoc_insertion_point(field_set:UserMsg.bytesval)
  if (!has_bytesval()) {
    clear_value();
    set_has_bytesval();
    value_.bytesval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.bytesval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserMsg.bytesval)
}
#endif
inline void UserMsg::set_bytesval(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_bytesval()) {
    clear_value();
    set_has_bytesval();
    value_.bytesval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.bytesval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserMsg.bytesval)
}
inline void UserMsg::set_bytesval(const void* value, size_t size) {
  if (!has_bytesval()) {
    clear_value();
    set_has_bytesval();
    value_.bytesval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.bytesval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserMsg.bytesval)
}
inline ::std::string* UserMsg::mutable_bytesval() {
  if (!has_bytesval()) {
    clear_value();
    set_has_bytesval();
    value_.bytesval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:UserMsg.bytesval)
  return value_.bytesval_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserMsg::release_bytesval() {
  // @@protoc_insertion_point(field_release:UserMsg.bytesval)
  if (has_bytesval()) {
    clear_has_value();
    return value_.bytesval_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void UserMsg::set_allocated_bytesval(::std::string* bytesval) {
  if (!has_bytesval()) {
    value_.bytesval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (bytesval != NULL) {
    set_has_bytesval();
    value_.bytesval_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytesval);
  }
  // @@protoc_insertion_point(field_set_allocated:UserMsg.bytesval)
}

inline bool UserMsg::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void UserMsg::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline UserMsg::ValueCase UserMsg::value_case() const {
  return UserMsg::ValueCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::UserMsg_valueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UserMsg_valueType>() {
  return ::UserMsg_valueType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_DemoMsg_2eproto
