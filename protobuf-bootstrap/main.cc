
// https://developers.google.com/protocol-buffers/docs/cpptutorial

#include <iostream>
#include <fstream>
#include <string>
#include "DemoMsg.pb.h"

using namespace std;


int read_msg(char * fname){

    DemoMsg msg;
    fstream input(fname, ios::in | ios::binary);
    if (!input) {
        cout << fname << ": File not found." << endl;
        return -1;
    }

    if (!msg.ParseFromIstream(&input)) {
        cerr << fname << ": Failed to parse." << endl;
        return -1;
    }

    cout << "sender: "<< msg.sender() << endl;

    cout << "usermsg: "<<endl;
    if (msg.has_usermsg()){
        UserMsg usermsg = msg.usermsg();
        cout << "\ttype: "<< usermsg.type()<< endl;
        
        switch (usermsg.value_case()){
            case usermsg.VALUE_NOT_SET:
                break;
            case usermsg.kBytesval:
                cout << "\tbyteval: "<< usermsg.bytesval()<< endl;break;
            case usermsg.kStringval:
                cout << "\tstringval: "<< usermsg.stringval()<< endl;break;
        }
    }else{
        cout <<"\tNO usermsg"<<endl;
    }

    return 0;
}


int write_msg(char * fname,DemoMsg * msg){

    fstream output(fname, ios::out | ios::trunc | ios::binary);
    if (!output) {
        cout << fname << ": File not found." << endl;
        return -1;
    }

    if (!msg->SerializeToOstream(&output)) {
        cerr << fname << ": Failed to serialize." << endl;
        return -1;
    }

    return 0;
}


int main(int argc, char** argv){
    GOOGLE_PROTOBUF_VERIFY_VERSION;
    if (argc != 3) {
        cerr << "Usage:  " << argv[0] << " [w|r] " << " FILE" << endl;
        return -1;
    }

    if(argv[1][0]=='r'){
        return read_msg(argv[2]);
    }else if(argv[1][0]=='w'){
        DemoMsg msg;
        msg.set_sender("Demo Sender");
        msg.set_priority(10);
        UserMsg *usermsg = new UserMsg;
        usermsg->set_bytesval("bytes val");
        usermsg->set_stringval("string val");
        msg.set_allocated_usermsg(usermsg);
        return write_msg(argv[2],&msg);
    }
    

    return 0;
}