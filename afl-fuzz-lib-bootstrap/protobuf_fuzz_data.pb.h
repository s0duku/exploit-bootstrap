// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf_fuzz_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_5ffuzz_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_5ffuzz_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protobuf_5ffuzz_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_5ffuzz_5fdata_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_5ffuzz_5fdata_2eproto;
class Json_array;
struct Json_arrayDefaultTypeInternal;
extern Json_arrayDefaultTypeInternal _Json_array_default_instance_;
class Json_false;
struct Json_falseDefaultTypeInternal;
extern Json_falseDefaultTypeInternal _Json_false_default_instance_;
class Json_key_value_pair;
struct Json_key_value_pairDefaultTypeInternal;
extern Json_key_value_pairDefaultTypeInternal _Json_key_value_pair_default_instance_;
class Json_null;
struct Json_nullDefaultTypeInternal;
extern Json_nullDefaultTypeInternal _Json_null_default_instance_;
class Json_number;
struct Json_numberDefaultTypeInternal;
extern Json_numberDefaultTypeInternal _Json_number_default_instance_;
class Json_object;
struct Json_objectDefaultTypeInternal;
extern Json_objectDefaultTypeInternal _Json_object_default_instance_;
class Json_true;
struct Json_trueDefaultTypeInternal;
extern Json_trueDefaultTypeInternal _Json_true_default_instance_;
class ProtobufFuzzData;
struct ProtobufFuzzDataDefaultTypeInternal;
extern ProtobufFuzzDataDefaultTypeInternal _ProtobufFuzzData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Json_array* Arena::CreateMaybeMessage<::Json_array>(Arena*);
template<> ::Json_false* Arena::CreateMaybeMessage<::Json_false>(Arena*);
template<> ::Json_key_value_pair* Arena::CreateMaybeMessage<::Json_key_value_pair>(Arena*);
template<> ::Json_null* Arena::CreateMaybeMessage<::Json_null>(Arena*);
template<> ::Json_number* Arena::CreateMaybeMessage<::Json_number>(Arena*);
template<> ::Json_object* Arena::CreateMaybeMessage<::Json_object>(Arena*);
template<> ::Json_true* Arena::CreateMaybeMessage<::Json_true>(Arena*);
template<> ::ProtobufFuzzData* Arena::CreateMaybeMessage<::ProtobufFuzzData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ProtobufFuzzData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtobufFuzzData) */ {
 public:
  inline ProtobufFuzzData() : ProtobufFuzzData(nullptr) {}
  ~ProtobufFuzzData() override;
  explicit PROTOBUF_CONSTEXPR ProtobufFuzzData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtobufFuzzData(const ProtobufFuzzData& from);
  ProtobufFuzzData(ProtobufFuzzData&& from) noexcept
    : ProtobufFuzzData() {
    *this = ::std::move(from);
  }

  inline ProtobufFuzzData& operator=(const ProtobufFuzzData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtobufFuzzData& operator=(ProtobufFuzzData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtobufFuzzData& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kObj = 1,
    kArr = 2,
    kNum = 3,
    kTrue = 4,
    kFalse = 5,
    kNull = 6,
    kStr = 7,
    VALUE_NOT_SET = 0,
  };

  static inline const ProtobufFuzzData* internal_default_instance() {
    return reinterpret_cast<const ProtobufFuzzData*>(
               &_ProtobufFuzzData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProtobufFuzzData& a, ProtobufFuzzData& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtobufFuzzData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtobufFuzzData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtobufFuzzData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtobufFuzzData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtobufFuzzData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProtobufFuzzData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtobufFuzzData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtobufFuzzData";
  }
  protected:
  explicit ProtobufFuzzData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjFieldNumber = 1,
    kArrFieldNumber = 2,
    kNumFieldNumber = 3,
    kTrueFieldNumber = 4,
    kFalseFieldNumber = 5,
    kNullFieldNumber = 6,
    kStrFieldNumber = 7,
  };
  // .Json_object obj = 1;
  bool has_obj() const;
  private:
  bool _internal_has_obj() const;
  public:
  void clear_obj();
  const ::Json_object& obj() const;
  PROTOBUF_NODISCARD ::Json_object* release_obj();
  ::Json_object* mutable_obj();
  void set_allocated_obj(::Json_object* obj);
  private:
  const ::Json_object& _internal_obj() const;
  ::Json_object* _internal_mutable_obj();
  public:
  void unsafe_arena_set_allocated_obj(
      ::Json_object* obj);
  ::Json_object* unsafe_arena_release_obj();

  // .Json_array arr = 2;
  bool has_arr() const;
  private:
  bool _internal_has_arr() const;
  public:
  void clear_arr();
  const ::Json_array& arr() const;
  PROTOBUF_NODISCARD ::Json_array* release_arr();
  ::Json_array* mutable_arr();
  void set_allocated_arr(::Json_array* arr);
  private:
  const ::Json_array& _internal_arr() const;
  ::Json_array* _internal_mutable_arr();
  public:
  void unsafe_arena_set_allocated_arr(
      ::Json_array* arr);
  ::Json_array* unsafe_arena_release_arr();

  // .Json_number num = 3;
  bool has_num() const;
  private:
  bool _internal_has_num() const;
  public:
  void clear_num();
  const ::Json_number& num() const;
  PROTOBUF_NODISCARD ::Json_number* release_num();
  ::Json_number* mutable_num();
  void set_allocated_num(::Json_number* num);
  private:
  const ::Json_number& _internal_num() const;
  ::Json_number* _internal_mutable_num();
  public:
  void unsafe_arena_set_allocated_num(
      ::Json_number* num);
  ::Json_number* unsafe_arena_release_num();

  // .Json_true true = 4;
  bool has_true_() const;
  private:
  bool _internal_has_true_() const;
  public:
  void clear_true_();
  const ::Json_true& true_() const;
  PROTOBUF_NODISCARD ::Json_true* release_true_();
  ::Json_true* mutable_true_();
  void set_allocated_true_(::Json_true* true_);
  private:
  const ::Json_true& _internal_true_() const;
  ::Json_true* _internal_mutable_true_();
  public:
  void unsafe_arena_set_allocated_true_(
      ::Json_true* true_);
  ::Json_true* unsafe_arena_release_true_();

  // .Json_false false = 5;
  bool has_false_() const;
  private:
  bool _internal_has_false_() const;
  public:
  void clear_false_();
  const ::Json_false& false_() const;
  PROTOBUF_NODISCARD ::Json_false* release_false_();
  ::Json_false* mutable_false_();
  void set_allocated_false_(::Json_false* false_);
  private:
  const ::Json_false& _internal_false_() const;
  ::Json_false* _internal_mutable_false_();
  public:
  void unsafe_arena_set_allocated_false_(
      ::Json_false* false_);
  ::Json_false* unsafe_arena_release_false_();

  // .Json_null null = 6;
  bool has_null() const;
  private:
  bool _internal_has_null() const;
  public:
  void clear_null();
  const ::Json_null& null() const;
  PROTOBUF_NODISCARD ::Json_null* release_null();
  ::Json_null* mutable_null();
  void set_allocated_null(::Json_null* null);
  private:
  const ::Json_null& _internal_null() const;
  ::Json_null* _internal_mutable_null();
  public:
  void unsafe_arena_set_allocated_null(
      ::Json_null* null);
  ::Json_null* unsafe_arena_release_null();

  // string str = 7;
  bool has_str() const;
  private:
  bool _internal_has_str() const;
  public:
  void clear_str();
  const std::string& str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str();
  PROTOBUF_NODISCARD std::string* release_str();
  void set_allocated_str(std::string* str);
  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:ProtobufFuzzData)
 private:
  class _Internal;
  void set_has_obj();
  void set_has_arr();
  void set_has_num();
  void set_has_true_();
  void set_has_false_();
  void set_has_null();
  void set_has_str();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::Json_object* obj_;
    ::Json_array* arr_;
    ::Json_number* num_;
    ::Json_true* true__;
    ::Json_false* false__;
    ::Json_null* null_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_protobuf_5ffuzz_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Json_key_value_pair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Json_key_value_pair) */ {
 public:
  inline Json_key_value_pair() : Json_key_value_pair(nullptr) {}
  ~Json_key_value_pair() override;
  explicit PROTOBUF_CONSTEXPR Json_key_value_pair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Json_key_value_pair(const Json_key_value_pair& from);
  Json_key_value_pair(Json_key_value_pair&& from) noexcept
    : Json_key_value_pair() {
    *this = ::std::move(from);
  }

  inline Json_key_value_pair& operator=(const Json_key_value_pair& from) {
    CopyFrom(from);
    return *this;
  }
  inline Json_key_value_pair& operator=(Json_key_value_pair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Json_key_value_pair& default_instance() {
    return *internal_default_instance();
  }
  static inline const Json_key_value_pair* internal_default_instance() {
    return reinterpret_cast<const Json_key_value_pair*>(
               &_Json_key_value_pair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Json_key_value_pair& a, Json_key_value_pair& b) {
    a.Swap(&b);
  }
  inline void Swap(Json_key_value_pair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Json_key_value_pair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Json_key_value_pair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Json_key_value_pair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Json_key_value_pair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Json_key_value_pair& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Json_key_value_pair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Json_key_value_pair";
  }
  protected:
  explicit Json_key_value_pair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .ProtobufFuzzData value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::ProtobufFuzzData& value() const;
  PROTOBUF_NODISCARD ::ProtobufFuzzData* release_value();
  ::ProtobufFuzzData* mutable_value();
  void set_allocated_value(::ProtobufFuzzData* value);
  private:
  const ::ProtobufFuzzData& _internal_value() const;
  ::ProtobufFuzzData* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::ProtobufFuzzData* value);
  ::ProtobufFuzzData* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:Json_key_value_pair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::ProtobufFuzzData* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_5ffuzz_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Json_object final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Json_object) */ {
 public:
  inline Json_object() : Json_object(nullptr) {}
  ~Json_object() override;
  explicit PROTOBUF_CONSTEXPR Json_object(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Json_object(const Json_object& from);
  Json_object(Json_object&& from) noexcept
    : Json_object() {
    *this = ::std::move(from);
  }

  inline Json_object& operator=(const Json_object& from) {
    CopyFrom(from);
    return *this;
  }
  inline Json_object& operator=(Json_object&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Json_object& default_instance() {
    return *internal_default_instance();
  }
  static inline const Json_object* internal_default_instance() {
    return reinterpret_cast<const Json_object*>(
               &_Json_object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Json_object& a, Json_object& b) {
    a.Swap(&b);
  }
  inline void Swap(Json_object* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Json_object* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Json_object* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Json_object>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Json_object& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Json_object& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Json_object* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Json_object";
  }
  protected:
  explicit Json_object(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .Json_key_value_pair entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::Json_key_value_pair* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Json_key_value_pair >*
      mutable_entries();
  private:
  const ::Json_key_value_pair& _internal_entries(int index) const;
  ::Json_key_value_pair* _internal_add_entries();
  public:
  const ::Json_key_value_pair& entries(int index) const;
  ::Json_key_value_pair* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Json_key_value_pair >&
      entries() const;

  // @@protoc_insertion_point(class_scope:Json_object)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Json_key_value_pair > entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_5ffuzz_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Json_array final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Json_array) */ {
 public:
  inline Json_array() : Json_array(nullptr) {}
  ~Json_array() override;
  explicit PROTOBUF_CONSTEXPR Json_array(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Json_array(const Json_array& from);
  Json_array(Json_array&& from) noexcept
    : Json_array() {
    *this = ::std::move(from);
  }

  inline Json_array& operator=(const Json_array& from) {
    CopyFrom(from);
    return *this;
  }
  inline Json_array& operator=(Json_array&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Json_array& default_instance() {
    return *internal_default_instance();
  }
  static inline const Json_array* internal_default_instance() {
    return reinterpret_cast<const Json_array*>(
               &_Json_array_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Json_array& a, Json_array& b) {
    a.Swap(&b);
  }
  inline void Swap(Json_array* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Json_array* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Json_array* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Json_array>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Json_array& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Json_array& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Json_array* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Json_array";
  }
  protected:
  explicit Json_array(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .ProtobufFuzzData values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::ProtobufFuzzData* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtobufFuzzData >*
      mutable_values();
  private:
  const ::ProtobufFuzzData& _internal_values(int index) const;
  ::ProtobufFuzzData* _internal_add_values();
  public:
  const ::ProtobufFuzzData& values(int index) const;
  ::ProtobufFuzzData* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtobufFuzzData >&
      values() const;

  // @@protoc_insertion_point(class_scope:Json_array)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtobufFuzzData > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_5ffuzz_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Json_number final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Json_number) */ {
 public:
  inline Json_number() : Json_number(nullptr) {}
  ~Json_number() override;
  explicit PROTOBUF_CONSTEXPR Json_number(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Json_number(const Json_number& from);
  Json_number(Json_number&& from) noexcept
    : Json_number() {
    *this = ::std::move(from);
  }

  inline Json_number& operator=(const Json_number& from) {
    CopyFrom(from);
    return *this;
  }
  inline Json_number& operator=(Json_number&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Json_number& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kLong = 1,
    kDouble = 2,
    VALUE_NOT_SET = 0,
  };

  static inline const Json_number* internal_default_instance() {
    return reinterpret_cast<const Json_number*>(
               &_Json_number_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Json_number& a, Json_number& b) {
    a.Swap(&b);
  }
  inline void Swap(Json_number* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Json_number* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Json_number* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Json_number>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Json_number& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Json_number& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Json_number* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Json_number";
  }
  protected:
  explicit Json_number(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongFieldNumber = 1,
    kDoubleFieldNumber = 2,
  };
  // int64 long = 1;
  bool has_long_() const;
  private:
  bool _internal_has_long_() const;
  public:
  void clear_long_();
  int64_t long_() const;
  void set_long_(int64_t value);
  private:
  int64_t _internal_long_() const;
  void _internal_set_long_(int64_t value);
  public:

  // double double = 2;
  bool has_double_() const;
  private:
  bool _internal_has_double_() const;
  public:
  void clear_double_();
  double double_() const;
  void set_double_(double value);
  private:
  double _internal_double_() const;
  void _internal_set_double_(double value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:Json_number)
 private:
  class _Internal;
  void set_has_long_();
  void set_has_double_();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int64_t long__;
    double double__;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_protobuf_5ffuzz_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Json_true final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Json_true) */ {
 public:
  inline Json_true() : Json_true(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Json_true(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Json_true(const Json_true& from);
  Json_true(Json_true&& from) noexcept
    : Json_true() {
    *this = ::std::move(from);
  }

  inline Json_true& operator=(const Json_true& from) {
    CopyFrom(from);
    return *this;
  }
  inline Json_true& operator=(Json_true&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Json_true& default_instance() {
    return *internal_default_instance();
  }
  static inline const Json_true* internal_default_instance() {
    return reinterpret_cast<const Json_true*>(
               &_Json_true_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Json_true& a, Json_true& b) {
    a.Swap(&b);
  }
  inline void Swap(Json_true* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Json_true* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Json_true* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Json_true>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Json_true& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Json_true& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Json_true";
  }
  protected:
  explicit Json_true(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Json_true)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_protobuf_5ffuzz_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Json_false final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Json_false) */ {
 public:
  inline Json_false() : Json_false(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Json_false(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Json_false(const Json_false& from);
  Json_false(Json_false&& from) noexcept
    : Json_false() {
    *this = ::std::move(from);
  }

  inline Json_false& operator=(const Json_false& from) {
    CopyFrom(from);
    return *this;
  }
  inline Json_false& operator=(Json_false&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Json_false& default_instance() {
    return *internal_default_instance();
  }
  static inline const Json_false* internal_default_instance() {
    return reinterpret_cast<const Json_false*>(
               &_Json_false_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Json_false& a, Json_false& b) {
    a.Swap(&b);
  }
  inline void Swap(Json_false* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Json_false* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Json_false* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Json_false>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Json_false& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Json_false& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Json_false";
  }
  protected:
  explicit Json_false(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Json_false)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_protobuf_5ffuzz_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Json_null final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Json_null) */ {
 public:
  inline Json_null() : Json_null(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Json_null(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Json_null(const Json_null& from);
  Json_null(Json_null&& from) noexcept
    : Json_null() {
    *this = ::std::move(from);
  }

  inline Json_null& operator=(const Json_null& from) {
    CopyFrom(from);
    return *this;
  }
  inline Json_null& operator=(Json_null&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Json_null& default_instance() {
    return *internal_default_instance();
  }
  static inline const Json_null* internal_default_instance() {
    return reinterpret_cast<const Json_null*>(
               &_Json_null_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Json_null& a, Json_null& b) {
    a.Swap(&b);
  }
  inline void Swap(Json_null* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Json_null* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Json_null* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Json_null>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Json_null& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Json_null& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Json_null";
  }
  protected:
  explicit Json_null(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Json_null)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_protobuf_5ffuzz_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtobufFuzzData

// .Json_object obj = 1;
inline bool ProtobufFuzzData::_internal_has_obj() const {
  return value_case() == kObj;
}
inline bool ProtobufFuzzData::has_obj() const {
  return _internal_has_obj();
}
inline void ProtobufFuzzData::set_has_obj() {
  _oneof_case_[0] = kObj;
}
inline void ProtobufFuzzData::clear_obj() {
  if (_internal_has_obj()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.obj_;
    }
    clear_has_value();
  }
}
inline ::Json_object* ProtobufFuzzData::release_obj() {
  // @@protoc_insertion_point(field_release:ProtobufFuzzData.obj)
  if (_internal_has_obj()) {
    clear_has_value();
    ::Json_object* temp = value_.obj_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.obj_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Json_object& ProtobufFuzzData::_internal_obj() const {
  return _internal_has_obj()
      ? *value_.obj_
      : reinterpret_cast< ::Json_object&>(::_Json_object_default_instance_);
}
inline const ::Json_object& ProtobufFuzzData::obj() const {
  // @@protoc_insertion_point(field_get:ProtobufFuzzData.obj)
  return _internal_obj();
}
inline ::Json_object* ProtobufFuzzData::unsafe_arena_release_obj() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtobufFuzzData.obj)
  if (_internal_has_obj()) {
    clear_has_value();
    ::Json_object* temp = value_.obj_;
    value_.obj_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProtobufFuzzData::unsafe_arena_set_allocated_obj(::Json_object* obj) {
  clear_value();
  if (obj) {
    set_has_obj();
    value_.obj_ = obj;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtobufFuzzData.obj)
}
inline ::Json_object* ProtobufFuzzData::_internal_mutable_obj() {
  if (!_internal_has_obj()) {
    clear_value();
    set_has_obj();
    value_.obj_ = CreateMaybeMessage< ::Json_object >(GetArenaForAllocation());
  }
  return value_.obj_;
}
inline ::Json_object* ProtobufFuzzData::mutable_obj() {
  ::Json_object* _msg = _internal_mutable_obj();
  // @@protoc_insertion_point(field_mutable:ProtobufFuzzData.obj)
  return _msg;
}

// .Json_array arr = 2;
inline bool ProtobufFuzzData::_internal_has_arr() const {
  return value_case() == kArr;
}
inline bool ProtobufFuzzData::has_arr() const {
  return _internal_has_arr();
}
inline void ProtobufFuzzData::set_has_arr() {
  _oneof_case_[0] = kArr;
}
inline void ProtobufFuzzData::clear_arr() {
  if (_internal_has_arr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.arr_;
    }
    clear_has_value();
  }
}
inline ::Json_array* ProtobufFuzzData::release_arr() {
  // @@protoc_insertion_point(field_release:ProtobufFuzzData.arr)
  if (_internal_has_arr()) {
    clear_has_value();
    ::Json_array* temp = value_.arr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.arr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Json_array& ProtobufFuzzData::_internal_arr() const {
  return _internal_has_arr()
      ? *value_.arr_
      : reinterpret_cast< ::Json_array&>(::_Json_array_default_instance_);
}
inline const ::Json_array& ProtobufFuzzData::arr() const {
  // @@protoc_insertion_point(field_get:ProtobufFuzzData.arr)
  return _internal_arr();
}
inline ::Json_array* ProtobufFuzzData::unsafe_arena_release_arr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtobufFuzzData.arr)
  if (_internal_has_arr()) {
    clear_has_value();
    ::Json_array* temp = value_.arr_;
    value_.arr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProtobufFuzzData::unsafe_arena_set_allocated_arr(::Json_array* arr) {
  clear_value();
  if (arr) {
    set_has_arr();
    value_.arr_ = arr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtobufFuzzData.arr)
}
inline ::Json_array* ProtobufFuzzData::_internal_mutable_arr() {
  if (!_internal_has_arr()) {
    clear_value();
    set_has_arr();
    value_.arr_ = CreateMaybeMessage< ::Json_array >(GetArenaForAllocation());
  }
  return value_.arr_;
}
inline ::Json_array* ProtobufFuzzData::mutable_arr() {
  ::Json_array* _msg = _internal_mutable_arr();
  // @@protoc_insertion_point(field_mutable:ProtobufFuzzData.arr)
  return _msg;
}

// .Json_number num = 3;
inline bool ProtobufFuzzData::_internal_has_num() const {
  return value_case() == kNum;
}
inline bool ProtobufFuzzData::has_num() const {
  return _internal_has_num();
}
inline void ProtobufFuzzData::set_has_num() {
  _oneof_case_[0] = kNum;
}
inline void ProtobufFuzzData::clear_num() {
  if (_internal_has_num()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.num_;
    }
    clear_has_value();
  }
}
inline ::Json_number* ProtobufFuzzData::release_num() {
  // @@protoc_insertion_point(field_release:ProtobufFuzzData.num)
  if (_internal_has_num()) {
    clear_has_value();
    ::Json_number* temp = value_.num_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.num_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Json_number& ProtobufFuzzData::_internal_num() const {
  return _internal_has_num()
      ? *value_.num_
      : reinterpret_cast< ::Json_number&>(::_Json_number_default_instance_);
}
inline const ::Json_number& ProtobufFuzzData::num() const {
  // @@protoc_insertion_point(field_get:ProtobufFuzzData.num)
  return _internal_num();
}
inline ::Json_number* ProtobufFuzzData::unsafe_arena_release_num() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtobufFuzzData.num)
  if (_internal_has_num()) {
    clear_has_value();
    ::Json_number* temp = value_.num_;
    value_.num_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProtobufFuzzData::unsafe_arena_set_allocated_num(::Json_number* num) {
  clear_value();
  if (num) {
    set_has_num();
    value_.num_ = num;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtobufFuzzData.num)
}
inline ::Json_number* ProtobufFuzzData::_internal_mutable_num() {
  if (!_internal_has_num()) {
    clear_value();
    set_has_num();
    value_.num_ = CreateMaybeMessage< ::Json_number >(GetArenaForAllocation());
  }
  return value_.num_;
}
inline ::Json_number* ProtobufFuzzData::mutable_num() {
  ::Json_number* _msg = _internal_mutable_num();
  // @@protoc_insertion_point(field_mutable:ProtobufFuzzData.num)
  return _msg;
}

// .Json_true true = 4;
inline bool ProtobufFuzzData::_internal_has_true_() const {
  return value_case() == kTrue;
}
inline bool ProtobufFuzzData::has_true_() const {
  return _internal_has_true_();
}
inline void ProtobufFuzzData::set_has_true_() {
  _oneof_case_[0] = kTrue;
}
inline void ProtobufFuzzData::clear_true_() {
  if (_internal_has_true_()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.true__;
    }
    clear_has_value();
  }
}
inline ::Json_true* ProtobufFuzzData::release_true_() {
  // @@protoc_insertion_point(field_release:ProtobufFuzzData.true)
  if (_internal_has_true_()) {
    clear_has_value();
    ::Json_true* temp = value_.true__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.true__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Json_true& ProtobufFuzzData::_internal_true_() const {
  return _internal_has_true_()
      ? *value_.true__
      : reinterpret_cast< ::Json_true&>(::_Json_true_default_instance_);
}
inline const ::Json_true& ProtobufFuzzData::true_() const {
  // @@protoc_insertion_point(field_get:ProtobufFuzzData.true)
  return _internal_true_();
}
inline ::Json_true* ProtobufFuzzData::unsafe_arena_release_true_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtobufFuzzData.true)
  if (_internal_has_true_()) {
    clear_has_value();
    ::Json_true* temp = value_.true__;
    value_.true__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProtobufFuzzData::unsafe_arena_set_allocated_true_(::Json_true* true_) {
  clear_value();
  if (true_) {
    set_has_true_();
    value_.true__ = true_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtobufFuzzData.true)
}
inline ::Json_true* ProtobufFuzzData::_internal_mutable_true_() {
  if (!_internal_has_true_()) {
    clear_value();
    set_has_true_();
    value_.true__ = CreateMaybeMessage< ::Json_true >(GetArenaForAllocation());
  }
  return value_.true__;
}
inline ::Json_true* ProtobufFuzzData::mutable_true_() {
  ::Json_true* _msg = _internal_mutable_true_();
  // @@protoc_insertion_point(field_mutable:ProtobufFuzzData.true)
  return _msg;
}

// .Json_false false = 5;
inline bool ProtobufFuzzData::_internal_has_false_() const {
  return value_case() == kFalse;
}
inline bool ProtobufFuzzData::has_false_() const {
  return _internal_has_false_();
}
inline void ProtobufFuzzData::set_has_false_() {
  _oneof_case_[0] = kFalse;
}
inline void ProtobufFuzzData::clear_false_() {
  if (_internal_has_false_()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.false__;
    }
    clear_has_value();
  }
}
inline ::Json_false* ProtobufFuzzData::release_false_() {
  // @@protoc_insertion_point(field_release:ProtobufFuzzData.false)
  if (_internal_has_false_()) {
    clear_has_value();
    ::Json_false* temp = value_.false__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.false__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Json_false& ProtobufFuzzData::_internal_false_() const {
  return _internal_has_false_()
      ? *value_.false__
      : reinterpret_cast< ::Json_false&>(::_Json_false_default_instance_);
}
inline const ::Json_false& ProtobufFuzzData::false_() const {
  // @@protoc_insertion_point(field_get:ProtobufFuzzData.false)
  return _internal_false_();
}
inline ::Json_false* ProtobufFuzzData::unsafe_arena_release_false_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtobufFuzzData.false)
  if (_internal_has_false_()) {
    clear_has_value();
    ::Json_false* temp = value_.false__;
    value_.false__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProtobufFuzzData::unsafe_arena_set_allocated_false_(::Json_false* false_) {
  clear_value();
  if (false_) {
    set_has_false_();
    value_.false__ = false_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtobufFuzzData.false)
}
inline ::Json_false* ProtobufFuzzData::_internal_mutable_false_() {
  if (!_internal_has_false_()) {
    clear_value();
    set_has_false_();
    value_.false__ = CreateMaybeMessage< ::Json_false >(GetArenaForAllocation());
  }
  return value_.false__;
}
inline ::Json_false* ProtobufFuzzData::mutable_false_() {
  ::Json_false* _msg = _internal_mutable_false_();
  // @@protoc_insertion_point(field_mutable:ProtobufFuzzData.false)
  return _msg;
}

// .Json_null null = 6;
inline bool ProtobufFuzzData::_internal_has_null() const {
  return value_case() == kNull;
}
inline bool ProtobufFuzzData::has_null() const {
  return _internal_has_null();
}
inline void ProtobufFuzzData::set_has_null() {
  _oneof_case_[0] = kNull;
}
inline void ProtobufFuzzData::clear_null() {
  if (_internal_has_null()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.null_;
    }
    clear_has_value();
  }
}
inline ::Json_null* ProtobufFuzzData::release_null() {
  // @@protoc_insertion_point(field_release:ProtobufFuzzData.null)
  if (_internal_has_null()) {
    clear_has_value();
    ::Json_null* temp = value_.null_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.null_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Json_null& ProtobufFuzzData::_internal_null() const {
  return _internal_has_null()
      ? *value_.null_
      : reinterpret_cast< ::Json_null&>(::_Json_null_default_instance_);
}
inline const ::Json_null& ProtobufFuzzData::null() const {
  // @@protoc_insertion_point(field_get:ProtobufFuzzData.null)
  return _internal_null();
}
inline ::Json_null* ProtobufFuzzData::unsafe_arena_release_null() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ProtobufFuzzData.null)
  if (_internal_has_null()) {
    clear_has_value();
    ::Json_null* temp = value_.null_;
    value_.null_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProtobufFuzzData::unsafe_arena_set_allocated_null(::Json_null* null) {
  clear_value();
  if (null) {
    set_has_null();
    value_.null_ = null;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtobufFuzzData.null)
}
inline ::Json_null* ProtobufFuzzData::_internal_mutable_null() {
  if (!_internal_has_null()) {
    clear_value();
    set_has_null();
    value_.null_ = CreateMaybeMessage< ::Json_null >(GetArenaForAllocation());
  }
  return value_.null_;
}
inline ::Json_null* ProtobufFuzzData::mutable_null() {
  ::Json_null* _msg = _internal_mutable_null();
  // @@protoc_insertion_point(field_mutable:ProtobufFuzzData.null)
  return _msg;
}

// string str = 7;
inline bool ProtobufFuzzData::_internal_has_str() const {
  return value_case() == kStr;
}
inline bool ProtobufFuzzData::has_str() const {
  return _internal_has_str();
}
inline void ProtobufFuzzData::set_has_str() {
  _oneof_case_[0] = kStr;
}
inline void ProtobufFuzzData::clear_str() {
  if (_internal_has_str()) {
    value_.str_.Destroy();
    clear_has_value();
  }
}
inline const std::string& ProtobufFuzzData::str() const {
  // @@protoc_insertion_point(field_get:ProtobufFuzzData.str)
  return _internal_str();
}
template <typename ArgT0, typename... ArgT>
inline void ProtobufFuzzData::set_str(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_str()) {
    clear_value();
    set_has_str();
    value_.str_.InitDefault();
  }
  value_.str_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtobufFuzzData.str)
}
inline std::string* ProtobufFuzzData::mutable_str() {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:ProtobufFuzzData.str)
  return _s;
}
inline const std::string& ProtobufFuzzData::_internal_str() const {
  if (_internal_has_str()) {
    return value_.str_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ProtobufFuzzData::_internal_set_str(const std::string& value) {
  if (!_internal_has_str()) {
    clear_value();
    set_has_str();
    value_.str_.InitDefault();
  }
  value_.str_.Set(value, GetArenaForAllocation());
}
inline std::string* ProtobufFuzzData::_internal_mutable_str() {
  if (!_internal_has_str()) {
    clear_value();
    set_has_str();
    value_.str_.InitDefault();
  }
  return value_.str_.Mutable(      GetArenaForAllocation());
}
inline std::string* ProtobufFuzzData::release_str() {
  // @@protoc_insertion_point(field_release:ProtobufFuzzData.str)
  if (_internal_has_str()) {
    clear_has_value();
    return value_.str_.Release();
  } else {
    return nullptr;
  }
}
inline void ProtobufFuzzData::set_allocated_str(std::string* str) {
  if (has_value()) {
    clear_value();
  }
  if (str != nullptr) {
    set_has_str();
    value_.str_.InitAllocated(str, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:ProtobufFuzzData.str)
}

inline bool ProtobufFuzzData::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ProtobufFuzzData::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ProtobufFuzzData::ValueCase ProtobufFuzzData::value_case() const {
  return ProtobufFuzzData::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Json_key_value_pair

// string key = 1;
inline void Json_key_value_pair::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Json_key_value_pair::key() const {
  // @@protoc_insertion_point(field_get:Json_key_value_pair.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Json_key_value_pair::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Json_key_value_pair.key)
}
inline std::string* Json_key_value_pair::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:Json_key_value_pair.key)
  return _s;
}
inline const std::string& Json_key_value_pair::_internal_key() const {
  return key_.Get();
}
inline void Json_key_value_pair::_internal_set_key(const std::string& value) {
  
  key_.Set(value, GetArenaForAllocation());
}
inline std::string* Json_key_value_pair::_internal_mutable_key() {
  
  return key_.Mutable(GetArenaForAllocation());
}
inline std::string* Json_key_value_pair::release_key() {
  // @@protoc_insertion_point(field_release:Json_key_value_pair.key)
  return key_.Release();
}
inline void Json_key_value_pair::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Json_key_value_pair.key)
}

// .ProtobufFuzzData value = 2;
inline bool Json_key_value_pair::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool Json_key_value_pair::has_value() const {
  return _internal_has_value();
}
inline void Json_key_value_pair::clear_value() {
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::ProtobufFuzzData& Json_key_value_pair::_internal_value() const {
  const ::ProtobufFuzzData* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProtobufFuzzData&>(
      ::_ProtobufFuzzData_default_instance_);
}
inline const ::ProtobufFuzzData& Json_key_value_pair::value() const {
  // @@protoc_insertion_point(field_get:Json_key_value_pair.value)
  return _internal_value();
}
inline void Json_key_value_pair::unsafe_arena_set_allocated_value(
    ::ProtobufFuzzData* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Json_key_value_pair.value)
}
inline ::ProtobufFuzzData* Json_key_value_pair::release_value() {
  
  ::ProtobufFuzzData* temp = value_;
  value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProtobufFuzzData* Json_key_value_pair::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:Json_key_value_pair.value)
  
  ::ProtobufFuzzData* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::ProtobufFuzzData* Json_key_value_pair::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProtobufFuzzData>(GetArenaForAllocation());
    value_ = p;
  }
  return value_;
}
inline ::ProtobufFuzzData* Json_key_value_pair::mutable_value() {
  ::ProtobufFuzzData* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:Json_key_value_pair.value)
  return _msg;
}
inline void Json_key_value_pair::set_allocated_value(::ProtobufFuzzData* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:Json_key_value_pair.value)
}

// -------------------------------------------------------------------

// Json_object

// repeated .Json_key_value_pair entries = 1;
inline int Json_object::_internal_entries_size() const {
  return entries_.size();
}
inline int Json_object::entries_size() const {
  return _internal_entries_size();
}
inline void Json_object::clear_entries() {
  entries_.Clear();
}
inline ::Json_key_value_pair* Json_object::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:Json_object.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Json_key_value_pair >*
Json_object::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:Json_object.entries)
  return &entries_;
}
inline const ::Json_key_value_pair& Json_object::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::Json_key_value_pair& Json_object::entries(int index) const {
  // @@protoc_insertion_point(field_get:Json_object.entries)
  return _internal_entries(index);
}
inline ::Json_key_value_pair* Json_object::_internal_add_entries() {
  return entries_.Add();
}
inline ::Json_key_value_pair* Json_object::add_entries() {
  ::Json_key_value_pair* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:Json_object.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Json_key_value_pair >&
Json_object::entries() const {
  // @@protoc_insertion_point(field_list:Json_object.entries)
  return entries_;
}

// -------------------------------------------------------------------

// Json_array

// repeated .ProtobufFuzzData values = 1;
inline int Json_array::_internal_values_size() const {
  return values_.size();
}
inline int Json_array::values_size() const {
  return _internal_values_size();
}
inline void Json_array::clear_values() {
  values_.Clear();
}
inline ::ProtobufFuzzData* Json_array::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:Json_array.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtobufFuzzData >*
Json_array::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Json_array.values)
  return &values_;
}
inline const ::ProtobufFuzzData& Json_array::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::ProtobufFuzzData& Json_array::values(int index) const {
  // @@protoc_insertion_point(field_get:Json_array.values)
  return _internal_values(index);
}
inline ::ProtobufFuzzData* Json_array::_internal_add_values() {
  return values_.Add();
}
inline ::ProtobufFuzzData* Json_array::add_values() {
  ::ProtobufFuzzData* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:Json_array.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtobufFuzzData >&
Json_array::values() const {
  // @@protoc_insertion_point(field_list:Json_array.values)
  return values_;
}

// -------------------------------------------------------------------

// Json_number

// int64 long = 1;
inline bool Json_number::_internal_has_long_() const {
  return value_case() == kLong;
}
inline bool Json_number::has_long_() const {
  return _internal_has_long_();
}
inline void Json_number::set_has_long_() {
  _oneof_case_[0] = kLong;
}
inline void Json_number::clear_long_() {
  if (_internal_has_long_()) {
    value_.long__ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t Json_number::_internal_long_() const {
  if (_internal_has_long_()) {
    return value_.long__;
  }
  return int64_t{0};
}
inline void Json_number::_internal_set_long_(int64_t value) {
  if (!_internal_has_long_()) {
    clear_value();
    set_has_long_();
  }
  value_.long__ = value;
}
inline int64_t Json_number::long_() const {
  // @@protoc_insertion_point(field_get:Json_number.long)
  return _internal_long_();
}
inline void Json_number::set_long_(int64_t value) {
  _internal_set_long_(value);
  // @@protoc_insertion_point(field_set:Json_number.long)
}

// double double = 2;
inline bool Json_number::_internal_has_double_() const {
  return value_case() == kDouble;
}
inline bool Json_number::has_double_() const {
  return _internal_has_double_();
}
inline void Json_number::set_has_double_() {
  _oneof_case_[0] = kDouble;
}
inline void Json_number::clear_double_() {
  if (_internal_has_double_()) {
    value_.double__ = 0;
    clear_has_value();
  }
}
inline double Json_number::_internal_double_() const {
  if (_internal_has_double_()) {
    return value_.double__;
  }
  return 0;
}
inline void Json_number::_internal_set_double_(double value) {
  if (!_internal_has_double_()) {
    clear_value();
    set_has_double_();
  }
  value_.double__ = value;
}
inline double Json_number::double_() const {
  // @@protoc_insertion_point(field_get:Json_number.double)
  return _internal_double_();
}
inline void Json_number::set_double_(double value) {
  _internal_set_double_(value);
  // @@protoc_insertion_point(field_set:Json_number.double)
}

inline bool Json_number::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Json_number::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Json_number::ValueCase Json_number::value_case() const {
  return Json_number::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Json_true

// -------------------------------------------------------------------

// Json_false

// -------------------------------------------------------------------

// Json_null

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protobuf_5ffuzz_5fdata_2eproto
