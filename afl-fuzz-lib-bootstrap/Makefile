

# https://github.com/AFLplusplus/AFLplusplus/blob/stable/docs/env_variables.md
# https://github.com/AFLplusplus/AFLplusplus/tree/stable/utils/persistent_mode
# https://github.com/AFLplusplus/AFLplusplus/blob/stable/qemu_mode/README.md


# user need to set target library, and target fuzz function, and buf size use to read data
FUZZ_LIB_NAME = libvuln.so
FUZZ_LIB_FUNC_NAME = vuln_func
FUZZ_INPUT_BUF_SIZE = 0x1000000

FUZZ_LIB_LDPATH = $(shell pwd)/lib:$(LD_LIBRARY_PATH)
FUZZ_LIB_PATH = $(shell pwd)/target/$(FUZZ_LIB_NAME)


CFLAGS = -Wl,--no-as-needed -ldl -no-pie -DFUZZ_INPUT_BUF_SIZE=$(FUZZ_INPUT_BUF_SIZE)

HARNESS_SRC = harness.c
HARNESS = harness

AFL_INPUTS = $(shell pwd)/inputs
AFL_OUTPUTS = $(shell pwd)/outputs

# AFL_QEMU_PERSISTENT_ADDR = 0x4000000000
AFL_QEMU_PERSISTENT_CNT = 5000
AFL_QEMU_PERSISTENT_GPR = 1
AFL_QEMU_PERSISTENT_MEM = 1
AFL_QEMU_PERSISTENT_EXITS = 1
AFL_QEMU_INST_RANGES = $(FUZZ_LIB_NAME)
AFL_INST_LIBS = 0

help: 
	@echo "Usage: make [OPTIONS]"
	@echo "  TARGETS:"
	@echo "    fuzz      Compile harness and run afl++."
	@echo "    clean     Clean all outputs"
	@echo "    help      Show this help."
	@echo "    test      Run harness tests."
	@echo "    restart   Run afl++, but do not recompile harness."
	@echo ""
	
# makefile every line fork a new shell, so env will not work
# fuzz target with afl, by default, use persistent mode
# direct read inputs from stdin
fuzz: 
	@echo " "
	@gcc $(CFLAGS) -DCALL_FUZZ_FUNC $(HARNESS_SRC) -o $(HARNESS)
	@export AFL_QEMU_INST_RANGES=$(AFL_QEMU_INST_RANGES); \
	export AFL_QEMU_PERSISTENT_CNT=$(AFL_QEMU_PERSISTENT_CNT); \
	export AFL_QEMU_PERSISTENT_ADDR=$(shell nm $(HARNESS) | grep 'T call_fuzz_func' | awk '{print"0x"$$1}'); \
	export AFL_QEMU_PERSISTENT_GPR=$(AFL_QEMU_PERSISTENT_GPR); \
	export AFL_QEMU_PERSISTENT_MEM=$(AFL_QEMU_PERSISTENT_MEM); \
	export AFL_QEMU_PERSISTENT_EXITS=$(AFL_QEMU_PERSISTENT_EXITS); \
	export LD_LIBRARY_PATH=$(FUZZ_LIB_LDPATH); \
	export FUZZ_LIB_PATH=$(FUZZ_LIB_PATH); \
	export FUZZ_LIB_FUNC_NAME=$(FUZZ_LIB_FUNC_NAME); \
	export AFL_INST_LIBS=$(AFL_INST_LIBS); \
	afl-fuzz -i $(AFL_INPUTS) -o $(AFL_OUTPUTS) -m none -Q -- `pwd`/$(HARNESS)

# directly call afl-fuzz again	
restart:
	@echo " "
	@export AFL_QEMU_INST_RANGES=$(AFL_QEMU_INST_RANGES); \
	export AFL_QEMU_PERSISTENT_CNT=$(AFL_QEMU_PERSISTENT_CNT); \
	export AFL_QEMU_PERSISTENT_ADDR=$(shell nm $(HARNESS) | grep 'T call_fuzz_func' | awk '{print"0x"$$1}'); \
	export AFL_QEMU_PERSISTENT_GPR=$(AFL_QEMU_PERSISTENT_GPR); \
	export AFL_QEMU_PERSISTENT_MEM=$(AFL_QEMU_PERSISTENT_MEM); \
	export AFL_QEMU_PERSISTENT_EXITS=$(AFL_QEMU_PERSISTENT_EXITS); \
	export LD_LIBRARY_PATH=$(FUZZ_LIB_LDPATH); \
	export FUZZ_LIB_PATH=$(FUZZ_LIB_PATH); \
	export FUZZ_LIB_FUNC_NAME=$(FUZZ_LIB_FUNC_NAME); \
	export AFL_INST_LIBS=$(AFL_INST_LIBS); \
	afl-fuzz -i $(AFL_INPUTS) -o $(AFL_OUTPUTS) -m none -Q -- `pwd`/$(HARNESS)

# directly run harness for testing
test: 
	@echo " "
	@gcc $(CFLAGS) -DTEST_FUZZ_FUNC $(HARNESS_SRC) -o $(HARNESS)
	@export LD_LIBRARY_PATH=$(FUZZ_LIB_LDPATH); \
	export FUZZ_LIB_PATH=$(FUZZ_LIB_PATH); \
	export FUZZ_LIB_FUNC_NAME=$(FUZZ_LIB_FUNC_NAME); \
	./$(HARNESS)

# trace case
trace:
	@if [ "$(TRACE_INPUT_CASE)" = "" ]; then\
		echo "Please Set TRACE_INPUT_CASE Env"; \
		exit 1;\
	fi
	@echo " "
	@export LD_LIBRARY_PATH=$(FUZZ_LIB_LDPATH); \
	export FUZZ_LIB_PATH=$(FUZZ_LIB_PATH); \
	export FUZZ_LIB_FUNC_NAME=$(FUZZ_LIB_FUNC_NAME); \
	afl-qemu-trace $(HARNESS) < $(TRACE_INPUT_CASE); \

clean:
	rm -rf $(HARNESS)
	rm -rf $(AFL_OUTPUTS)/*